/*
he * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Heap_sort_app;

import com.sun.glass.events.KeyEvent;
import com.sun.javafx.scene.traversal.Algorithm;
import heap_sort.Algorithm2;
import heap_sort.Complete_binary_tree;
import heap_sort.Nodo;
import heap_sort.Nodo_float;
import heap_sort.pantalla.Pantalla_de_ejecucion;
import java.util.Timer;
import java.util.TimerTask;
import java.applet.AudioClip;
import java.awt.Toolkit;
import java.awt.*;
import java.util.Arrays;
import java.awt.event.*;
import java.awt.event.WindowEvent;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import java.util.Random;
import java.io.*;
import sun.audio.*;
import java.util.concurrent.ScheduledExecutorService;
import java.lang.Thread;
import java.io.*;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import sun.util.calendar.CalendarUtils;

/**
 *
 * @author biosh
 */
public class HACE_PROGRAMA extends javax.swing.JFrame {
        private boolean variable_se_aplica_heapify=false,variable_app=false;
        private int variable_comprueba_vaciado =0,variable_se_ingresan_datos_despues_de_vaciado=0;
        private  String raiz_de_cbt =new String();
        private String Para_imprimir =new String();
        private boolean se_ha_modificado_array=false;
        private Complete_binary_tree COMPLETE_BYNARY_TREE = new Complete_binary_tree(); 
        private ArrayList<Integer> Complete_binary_tree_array= new ArrayList<>();
        private ArrayList<Integer> auxiliar= new ArrayList<>();
        private String obtiene_matriz=new String();
        private int contador_para_agregar=0,contador_para_auxiliar=0;
        private int[] mostrar= new int[0];
        private boolean on_off_arbol_cbt=false;
        private Algorithm2 aplica_Algorithm =new Algorithm2();
    //public Example2 nuev=new Example2();
    /**
     * @return the char_aborrar
     */
    public char getChar_aborrar() {
        return char_aborrar;
    }

    /**
     * @param char_aborrar the char_aborrar to set
     */
    public void setChar_aborrar(char char_aborrar) 
    {
        this.char_aborrar = char_aborrar;
    }
      public ArrayList<Character> para_transmitir= new ArrayList<>(); 
      public ArrayList<Character> lista_2= new ArrayList<>();
     private int tamanio_array=0,contador_para_modificacion=0;
    private int ingreso_a_dinamic_array=0,numero_para_la_matriz=0,index_de_agregacion=0;
     private char char_aborrar=0;
     private String cadena_en_text_field= new String();
     private String muestra_los_dos_heaps= new String();
     /**
     * Creates new form HACE_PROGRAMA
     */
       public AudioClip sonido_click ;
  
    public HACE_PROGRAMA()
    {
      //  this.Algorithm = new Heap_sort();
        initComponents();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button_ingresa_datos_matriz = new javax.swing.JButton();
        field_text_para_datos_matriz = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        button_ingresa_datos_matriz.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        button_ingresa_datos_matriz.setText("Ingresar numeros enteros a matriz");
        button_ingresa_datos_matriz.setToolTipText("");
        button_ingresa_datos_matriz.setName(""); // NOI18N
        button_ingresa_datos_matriz.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                button_ingresa_datos_matrizMouseClicked(evt);
            }
        });
        button_ingresa_datos_matriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_ingresa_datos_matrizActionPerformed(evt);
            }
        });
        getContentPane().add(button_ingresa_datos_matriz, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 100, 290, 30));

        field_text_para_datos_matriz.setFont(new java.awt.Font("DialogInput", 1, 14)); // NOI18N
        field_text_para_datos_matriz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                field_text_para_datos_matrizActionPerformed(evt);
            }
        });
        field_text_para_datos_matriz.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                field_text_para_datos_matrizKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                field_text_para_datos_matrizKeyTyped(evt);
            }
        });
        getContentPane().add(field_text_para_datos_matriz, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 100, 190, 30));

        jLabel3.setFont(new java.awt.Font("Engravers MT", 3, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 102, 102));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/heap_sort/imagenes/instrucciones_bien.png"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 650, 0));

        jTextField1.setFont(new java.awt.Font("Franklin Gothic Book", 3, 22)); // NOI18N
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextField1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 180, 410, 60));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/heap_sort/imagenes/instrucciones_3.png"))); // NOI18N
        jLabel2.setName(""); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 0, 340, 90));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/heap_sort/imagenes/Webp.net-resize.png"))); // NOI18N
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 330, 90));

        jButton1.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jButton1.setText("Eliminar dato de matriz ");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/heap_sort/imagenes/muestra_array_2.png"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 140, 360, 40));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/heap_sort/imagenes/genera_array.png"))); // NOI18N
        jLabel5.setText("para_cartel");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 400, 70));

        jButton2.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jButton2.setText("Vaciar matriz");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 210, 160, 30));

        jButton3.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jButton3.setText("Generar complete binary tree ");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 250, -1, -1));
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 90, 650, 380));

        jButton4.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jButton4.setText("Aplicar heap sort algorithm ");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 250, 250, -1));

        jButton6.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jButton6.setText("Ir a app");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 430, 110, -1));

        jButton5.setFont(new java.awt.Font("Georgia", 1, 14)); // NOI18N
        jButton5.setText("Regresar a menu principal");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 430, -1, -1));

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Georgia", 1, 16)); // NOI18N
        jTextArea1.setRows(5);
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea1KeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 280, 630, 140));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/heap_sort/imagenes/wall_paper_blue.jpg"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 650, 470));

        pack();
    }// </editor-fold>//GEN-END:initComponents

        
    private void button_ingresa_datos_matrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_ingresa_datos_matrizActionPerformed
         /* PERMITE INGRESAR DATOS A UN DINAMIC ARRAY */
         // TODO add your handling code here:
    }//GEN-LAST:event_button_ingresa_datos_matrizActionPerformed

    private void button_ingresa_datos_matrizMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_button_ingresa_datos_matrizMouseClicked
        // TODO add your handling code here:
        
        if (field_text_para_datos_matriz.getText().length()>0) 
        {
        int para_meter_en_array_y_hacer_arbol=0; 
      /*       CUANDO SE DA CLICK PARA INGRESAR DATO              */        
        sonido_click=java.applet.Applet.newAudioClip(getClass().getResource("/heap_sort/Click de mouse-efecto de sonido (HD) (online-audio-converter.com).wav"));
        sonido_click.play(); 
        field_text_para_datos_matriz.getText();
        System.out.println("tenemos"+field_text_para_datos_matriz.getText());
        /*          CONVERTIR EL field_text_para_datos_matriz.getText() A INT PRA MERTELO EN LA MATRUZ DYNAMIC      */
        setCadena_en_text_field(field_text_para_datos_matriz.getText());
              //  setContador_para_agregar(getContador_para_agregar()+1);
       // getComplete_binary_tree_array().add(getContador_para_agregar(), para_meter_en_array_y_hacer_arbol);
         /*  ES UN INT */
             para_meter_en_array_y_hacer_arbol=Integer.parseInt(cadena_en_text_field);
             int recorre=0;
              //   System.out.ln("este es el numero en ints  "+para_meter_en_array_y_hacer_arbol);
                 getComplete_binary_tree_array().add(getContador_para_agregar(), para_meter_en_array_y_hacer_arbol);
               ///   setContador_para_agregar(getContador_para_agregar()+1);
         mostrar=getCOMPLETE_BYNARY_TREE().genera_array(getComplete_binary_tree_array(), getContador_para_agregar(),para_meter_en_array_y_hacer_arbol);
                if (getVariable_comprueba_vaciado()==1)
                {
                    setVariable_se_ingresan_datos_despues_de_vaciado(1);
                 imprime_array_en_jtext_field(mostrar,getContador_para_agregar());
                }
                else if (getVariable_comprueba_vaciado()==0)
                {
                imprime_array_en_jtext_field(mostrar,getContador_para_agregar());
                }
                setContador_para_agregar(getContador_para_agregar()+1);
                getConvertir_a_dynamic_array().add(para_meter_en_array_y_hacer_arbol);
             field_text_para_datos_matriz.setText(null);
        lista_2.clear();
        }else
        {
                  JOptionPane.showMessageDialog(null,"Favor de ingresar un dato ");    
           }
    }//GEN-LAST:event_button_ingresa_datos_matrizMouseClicked
    private int numero_de_alumnos=0;  
    
    public void ingresa_datos_con_enter ()
      {
          if (isVariable_app()==false)
          {
        if (field_text_para_datos_matriz.getText().length()>0) 
        {
        int para_meter_en_array_y_hacer_arbol=0; 
        field_text_para_datos_matriz.getText();
        sonido_click=java.applet.Applet.newAudioClip(getClass().getResource("/heap_sort/Click de mouse-efecto de sonido (HD) (online-audio-converter.com).wav"));
        sonido_click.play(); 
        System.out.println("tenemos"+field_text_para_datos_matriz.getText());
        /*          CONVERTIR EL field_text_para_datos_matriz.getText() A INT PRA MERTELO EN LA MATRUZ DYNAMIC      */
        setCadena_en_text_field(field_text_para_datos_matriz.getText());
        
       //  getComplete_binary_tree_array().add(getContador_para_agregar(), para_meter_en_array_y_hacer_arbol);
    //    getComplete_binary_tree_array().add( para_meter_en_array_y_hacer_arbol);
        /*  ES UN INT */
             para_meter_en_array_y_hacer_arbol=Integer.parseInt(cadena_en_text_field);
             int recorre=0;
                System.out.println("este es el numero en ints  "+para_meter_en_array_y_hacer_arbol);
                 getComplete_binary_tree_array().add(getContador_para_agregar(), para_meter_en_array_y_hacer_arbol);
                // setContador_para_agregar(getContador_para_agregar()+1);
            for (int i = 0; i < getComplete_binary_tree_array().size(); i++)
            { 
              System.out.println(" checa el complete binary tree array");
                System.out.println(getComplete_binary_tree_array());
            }
            System.out.println();
               
               
               
               
               
               
               
              mostrar=getCOMPLETE_BYNARY_TREE().genera_array(getComplete_binary_tree_array(), getContador_para_agregar(),para_meter_en_array_y_hacer_arbol);
       //        Arrays.toString( mostrar);
         
         
         
         
         
         
         
         
         
         
         
         
         
         
         
        System.out.println("  VEMOS QUE PASA INGRESA ENTER");   
         for (int i = 0; i < mostrar.length; i++)
              {
                  if (mostrar[i]!=0)
                 {
                     System.out.println(mostrar[i]); 
                     System.out.println(" error");
                 }
              }
                if (getVariable_comprueba_vaciado()==1)
                {
         
                    setVariable_se_ingresan_datos_despues_de_vaciado(1);
                    
                 imprime_array_en_jtext_field(mostrar,getContador_para_agregar());
                }
                else if (getVariable_comprueba_vaciado()==0)
                {
                imprime_array_en_jtext_field(mostrar,getContador_para_agregar());
                }
                setContador_para_agregar(getContador_para_agregar()+1);
                getConvertir_a_dynamic_array().add(para_meter_en_array_y_hacer_arbol);
             field_text_para_datos_matriz.setText(null);
        lista_2.clear();    
        }else
           {
                  JOptionPane.showMessageDialog(null,"Favor de ingresar un dato ");    
           }
      }else
          {
              jTextField1.setText("");
              
            if (field_text_para_datos_matriz.getText().length()>0) 
        {
        int para_meter_en_array_y_hacer_arbol=0; 
        field_text_para_datos_matriz.getText();
        sonido_click=java.applet.Applet.newAudioClip(getClass().getResource("/heap_sort/Click de mouse-efecto de sonido (HD) (online-audio-converter.com).wav"));
        sonido_click.play();
            if (Integer.parseInt(field_text_para_datos_matriz.getText())>=30&&Integer.parseInt(field_text_para_datos_matriz.getText())<1000)
            {
                numero_de_alumnos=Integer.parseInt(field_text_para_datos_matriz.getText());
                
                jTextField1.setText(numero_de_alumnos+"");
                COMPLETE_BYNARY_TREE.hace_matriz_alumnos(numero_de_alumnos);
                for (int i = 0; i < numero_de_alumnos; i++) 
                {
                jTextArea1.setText(jTextArea1.getText()+"\n"+COMPLETE_BYNARY_TREE.getSolucion_de_problema().get(i)+"\n");
                }
                
            }
            else
            {
                       JOptionPane.showMessageDialog(null,"Favor de ingresar un numero mayor o lgual a 30 y menor a 1000 ");    
                
            }
             field_text_para_datos_matriz.setText(null);
        lista_2.clear();    
        }else
           {
                  JOptionPane.showMessageDialog(null,"Favor de ingresar un dato ");    
           }
          
            
            
            
            
            
              
              
              
              
              
              
              
          }
} 
      
    private void field_text_para_datos_matrizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_field_text_para_datos_matrizActionPerformed
        
// TODO add your handling code here:
    }//GEN-LAST:event_field_text_para_datos_matrizActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
           
      
    }//GEN-LAST:event_jTextField1ActionPerformed
      
    private void field_text_para_datos_matrizKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_field_text_para_datos_matrizKeyTyped
        char c=evt.getKeyChar();
    //    String filterText = getText();
        int  d=0;
        char cero='0';
         char loque_ingresa=evt.getKeyChar();
                
         
        if (!(Character.isDigit(c))/**/||c==KeyEvent.VK_0&&lista_2.size()==0) 
        {  
         evt.consume();
        }else
        {
            
            if (lista_2.size()>=0&&lista_2.size()<=8)
            {
            lista_2.add(evt.getKeyChar());
            System.out.println("el size es "+getTamanio_array());
            setTamanio_array(lista_2.size());
            setChar_aborrar(evt.getKeyChar());
            }
        }
        if(c==KeyEvent.VK_BACKSPACE&&lista_2.size()==lista_2.size()&&lista_2.size()>0)
        {
         System.out.println("se quiere borrar el"+lista_2.get(lista_2.size()-1));
           lista_2.remove(lista_2.size()-1);
         System.out.println("el size es despues de borrar "+lista_2.size()); 
        }
      
        
        if(c==KeyEvent.VK_ENTER)
        {
            if (lista_2.size()>0&&lista_2.size()<=8)
            {
                
            ingresa_datos_con_enter ();
            }else if(lista_2.size()==0)
         {
         JOptionPane.showMessageDialog(null,"Favor de ingresar un dato ");    
         }
            
        }
          
        if (Character.SIZE<0||lista_2.size()==9/*||lista_2.size()<5*/)
         {
         getToolkit().beep();
         evt.consume();
         }
        
        

                // TODO add your handling code here:
    }//GEN-LAST:event_field_text_para_datos_matrizKeyTyped

    private void field_text_para_datos_matrizKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_field_text_para_datos_matrizKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_field_text_para_datos_matrizKeyPressed

    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
         evt.consume();
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1MouseClicked
    public void imprime_array_en_jtext_field(int array_para_arbol[],int contador)
    {
        if (getVariable_comprueba_vaciado()==1)
        {
          System.out.println("                                  SE APLICA SOLUCION             dos");
            for (int i = 0; i < array_para_arbol.length; i++) 
            {
                if (i>0)
                {
                array_para_arbol[i]=0;
                }
            }
            for (int i = 0; i < array_para_arbol.length; i++) 
            {
              System.out.println(array_para_arbol[i]);    
            }
            setVariable_se_ingresan_datos_despues_de_vaciado(0);
            setVariable_comprueba_vaciado(0);
          }
        String muestra_a_usuario=new String();
       int se_suma_a_cadena=0;
         for (int i = 0; i < array_para_arbol.length/*contador*/; i++) 
         { 
             if(array_para_arbol[i]!=0)
             {
                 se_suma_a_cadena=array_para_arbol[i];
                 if (i==0)
                 {
                     /*         SI ES EL PRIMERO        */
                 muestra_a_usuario=se_suma_a_cadena+"";
                     
                 }else if(i==contador)
                 {
                    System.out.println(" se imprime ultimo");
                      /*         SI ES EL ULTIMO        */
                  muestra_a_usuario=muestra_a_usuario+","+se_suma_a_cadena;    
                 }else
                 {
                 muestra_a_usuario=muestra_a_usuario+","+se_suma_a_cadena;
                 }
              }
         }
        jTextField1.setText(" {"+muestra_a_usuario+"}");
        setObtiene_matriz(jTextField1.getText());
    }
     public void imprime_array_en_jtext_field_solucion(int array_para_arbol[],int contador)
    {
        String muestra_a_usuario=new String();
         for (int i = 0; i < array_para_arbol.length; i++) 
         { 
             if(array_para_arbol[i]!=0)
             {
                int se_suma_a_cadena=array_para_arbol[i];
                 if (array_para_arbol[i]==array_para_arbol[0])
                 {
                     /*         SI ES EL PRIMERO        */
                 muestra_a_usuario=se_suma_a_cadena+"";
                     
                 }else if(i==contador)
                 {
                    System.out.println(" se imprime ultimo");
                      /*         SI ES EL ULTIMO        */
                  muestra_a_usuario=muestra_a_usuario+","+se_suma_a_cadena;    
                 }else
                 {
                 muestra_a_usuario=muestra_a_usuario+","+se_suma_a_cadena;
                 }
               
              }
         }
        jTextField1.setText(" {"+muestra_a_usuario+"}");
        setObtiene_matriz(jTextField1.getText()); 
    } 
    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
        evt.consume();
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1KeyTyped
    public ArrayList<Integer> convierte_a_dynamic_array(int[] array_para_convertir)
    {     
        int nuevo_limite=0;
         System.out.println(" se transforma a dynamic");  
        /*usado para el medoto de borrar y vaciar*/
         int j=0,diferencia=0, k=0;
          ArrayList<Integer> convertida= new ArrayList<>();
          int cuenta_index=0;
          for (int i = 0; i < array_para_convertir.length; i++) 
          {
              if (array_para_convertir[i]!=0) 
              {
               convertida.add(cuenta_index, array_para_convertir[i]);
               cuenta_index++;   
              }
          }
          //nuevo_length
           System.out.println(" ya convertida a dynamic");
          for (int i = 0; i < cuenta_index; i++)
          {
              System.out.println(convertida.get(i));
          }
          return convertida;    
    }
    public int[] convierte_a_array(ArrayList<Integer> dynamic_array_a_convertir)
    {     
        
       
          System.out.println(" se transforma a array basico");
          /* regresa el dato a la normalidad */
          int[] convertido= new int[dynamic_array_a_convertir.size()];
          for (int i = 0; i < dynamic_array_a_convertir.size(); i++)
          {
           System.out.println(dynamic_array_a_convertir.get(i));
          }
          
          for (int i = 0; i < dynamic_array_a_convertir.size(); i++) 
          {
         // convertido[i]=dynamic_array_a_convertir.get(i);
          }
             System.out.println(" acaba funcion");
             System.out.println(" de plano si");                 
          return convertido;    
    }
    private ArrayList<Integer> convertir_a_dynamic_array=new ArrayList<>();
 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public void borra_dato(int array_para_arbol[],int contador)
    {
        boolean checa_si_existe =false;
        int dato_a_borrar=0,recorre=contador,suma_de_elementos=0; 
      /* SUMA ELEMENTOS DE LA MATRIZ*/for (int i = 0; i < contador ; i++)  {suma_de_elementos=suma_de_elementos+array_para_arbol[i];}
       /*COMPRUEBA SI LA MATRIZ ESTA VACIA */ if (suma_de_elementos==0){JOptionPane.showMessageDialog(null, "No hay elementos en el array" );}
       if (array_para_arbol.length>0&&suma_de_elementos>0)
        {
            setContador_para_modificacion(getContador_para_modificacion()+1);
          
            if (getContador_para_modificacion()>0) 
            {
                setConvertir_a_dynamic_array(convierte_a_dynamic_array(array_para_arbol));
       do {
       System.out.println("matriz antes");
          for (int i = 0; i < array_para_arbol.length; i++) 
          {
              System.out.println(array_para_arbol[i]);
          }
          try 
            {
                dato_a_borrar = Integer.parseInt(JOptionPane.showInputDialog(null,
                        "Ingrese el dato a borrar: \n"+getObtiene_matriz(),1));
            } catch (Exception n) 
             {
                JOptionPane.showMessageDialog(null, "Error" + n.getMessage());
             }
///////////////////////////////////////////NUEVOS PROCESOS//////////////////////////////////////////////
          recorre=0;
          recorre=getConvertir_a_dynamic_array().size()-1;
          do{
              if(getConvertir_a_dynamic_array().get(recorre)==dato_a_borrar)
              {
                  getConvertir_a_dynamic_array().remove(recorre);
                  checa_si_existe=true;
              }
              recorre--;
          }
          while(checa_si_existe!=true);
         System.out.println("pasa a otra fase");
        if (checa_si_existe==true) 
        {    
          System.out.println("            DATO A BORRAR ES  "+dato_a_borrar);
                  System.out.println("matriz despues");
          for (int i = 0; i < array_para_arbol.length; i++) 
          {
             /* if (array_para_arbol[i]==dato_a_borrar) 
              {
                  array_para_arbol[i]=0;
              }*/
             System.out.println(array_para_arbol[i]);
          }      
                     System.out.println(" matriz mostrar");  
                      recorre=0;                  
                      recorre=mostrar.length-1;
                      checa_si_existe=false;
                      do
                      {
                        if (mostrar[recorre]==dato_a_borrar)
                        {    
                        mostrar[recorre]=0;
                        checa_si_existe=true;
                        }
                        recorre--;
                      }while(checa_si_existe!=true);
                     System.out.println(" complete binary tree");     
                    recorre=0;                  
                   //   recorre=getComplete_binary_tree_array().size()-1;
                      checa_si_existe=false;
                     
                      recorre=getComplete_binary_tree_array().size()-1;
                       do
                      {
                        if (getComplete_binary_tree_array().get(recorre)==dato_a_borrar)
                        {    
                     //    getComplete_binary_tree_array().remove(getComplete_binary_tree_array().indexOf(dato_a_borrar));   
      /* MODIFICACION 6:13 AM ENERO   */getComplete_binary_tree_array().remove(recorre);
                                           setContador_para_agregar(getContador_para_agregar()-1);
                                    checa_si_existe=true;
                        }
                        recorre--;
                      }while(checa_si_existe!=true);
                       System.out.println("  dato_borrado");
                            setSe_ha_modificado_array(true);
                                       System.out.println(" convertir a dynamic array  1");     
                               for (int j = 0; j < getConvertir_a_dynamic_array().size(); j++)
                                {
                                System.out.println(getConvertir_a_dynamic_array().get(j));
                               }
            System.out.println("  GATO ELIMINADO");
            System.out.println("matriz despues");
            System.out.println(" convertir a dynamic array");     
          for (int i = 0; i < getConvertir_a_dynamic_array().size() ; i++) 
          {
            System.out.println(getConvertir_a_dynamic_array().get(i));
          }
        }
       }
       while (checa_si_existe != true);
            }
          }
        imprime_array_en_jtext_field(getMostrar(), contador);
        }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    public ArrayList<Integer> vacia_dynamic_array(ArrayList<Integer> a_vaciar)
    {
        a_vaciar.removeAll(a_vaciar);
        return a_vaciar;
    }
    public void vacia_matriz(int array_para_arbol[],int contador)
    {
          int recorre=contador;
          int suma_de_elementos=0;
          for (int i = 0; i < contador ; i++) 
          {
              suma_de_elementos=suma_de_elementos+array_para_arbol[i];
          }
             if (suma_de_elementos==0)
             {
                       JOptionPane.showMessageDialog(null, "No hay elementos en el array" );
             }else
             {
              setSe_ha_modificado_array(true);
              recorre=0;
            do
            {   
                array_para_arbol[recorre]=0;
                recorre++;
            }
              while(recorre!=getConvertir_a_dynamic_array().size());
              setConvertir_a_dynamic_array(vacia_dynamic_array(convierte_a_dynamic_array(array_para_arbol)));
              imprime_array_en_jtext_field(array_para_arbol, contador);
             }
    }
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        if(isSe_ha_modificado_array()==false)
        {
        borra_dato( getMostrar(),getContador_para_agregar());
        }else if(isSe_ha_modificado_array()==true)
        {
        borra_dato( getMostrar(),getMostrar().length);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        if (isVariable_app()==false)
        {
            
        
 
        ArrayList<Integer> nuevo=new ArrayList<>();
         ArrayList<Integer> nuevo_2=new ArrayList<>();
         int[] para_vaciar=new int[nuevo.size()];
         setMostrar(para_vaciar);
         setComplete_binary_tree_array(nuevo);
         field_text_para_datos_matriz.setText(null);
         setVariable_se_ingresan_datos_despues_de_vaciado(0);
         int nueva_magnitud=0;
         for (int i = 0; i < mostrar.length; i++)
         {
             if (mostrar[i]!=0) 
             {
             nueva_magnitud++;    
             }
         }
         setContador_para_agregar(nueva_magnitud);
        System.out.println("                                                            contador de magnitud es "+getContador_para_agregar());
         mostrar=getCOMPLETE_BYNARY_TREE().limpia_array(Complete_binary_tree_array);
         setConvertir_a_dynamic_array(nuevo_2);
         imprime_array_en_jtext_field(mostrar,nueva_magnitud);
         field_text_para_datos_matriz.setText(null);
         setComplete_binary_tree_array(nuevo);
         setVariable_comprueba_vaciado(1);
         imprime_array_en_jtext_field_solucion(mostrar, mostrar.length);
        }else if (isVariable_app()==true)
        {
           jTextField1.setText(" ");
        }
        
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        // REALIZA APP
        setVariable_app(true);
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/heap_sort/imagenes/instrucciones_app_2.png")));
        jLabel6.setVisible(true);
        jLabel2.setVisible(true);
        jTextArea1.setText(" ");
        jTextField1.setText(" ");
        button_ingresa_datos_matriz.setVisible(false);
           field_text_para_datos_matriz.setVisible(false);
           jScrollPane1.setVisible(false);
           jLabel4.setVisible(false);
           jLabel5.setVisible(false);
           jButton1.setVisible(false);
           jButton2.setVisible(false);
           jButton3.setVisible(false);
           jButton4.setVisible(false);
           jButton5.setVisible(false);
           jButton6.setVisible(false);
           jLabel7.setVisible(false);
           jTextArea1.setVisible(false);
           jScrollPane1.setVisible(false);
           jScrollPane2.setVisible(false);
               Timer timer =new Timer();
          TimerTask aparece_boton = new TimerTask()
          {
            @Override
            public void run()
            {
      
                /* DESAPARECEN EN PROCESO DE LAS INSTRUCCIONES */
                button_ingresa_datos_matriz.setVisible(true);
                jScrollPane1.setVisible(true);
                field_text_para_datos_matriz.setVisible(true);
                jLabel3.setVisible(false);
                jLabel2.setVisible(false);
                jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/heap_sort/imagenes/rsz_1rsz_muestra_alumnos.png")));
                jLabel4.setVisible(true);
                 
                //   jLabel5.setVisible(true);
                jTextArea1.setVisible(true);
                jScrollPane1.setVisible(true);
                jScrollPane2.setVisible(true);
                jButton1.setVisible(false);
                jButton2.setText("limpiar textfield");
                jButton2.setVisible(true);
                jButton3.setVisible(true);
                jButton4.setVisible(true);
                jLabel7.setVisible(true);
                jButton6.setVisible(false);
                jLabel6.setVisible(false);
                
 //               jButton5.setLocation(220, 430);//setAlignmentY(TOP_ALIGNMENT);
                jButton5.setVisible(true);
               // jButton5.setBounds(220, 430, 27, 227);
                
                button_ingresa_datos_matriz.setText(" Ingrese el numero de alumnos ");
            }
         };     
                 timer.schedule(aparece_boton, 11000);
                jButton5.setLocation(220, 430);
                  //  jButton6.setVisible(false);
     
           

    }//GEN-LAST:event_jButton6ActionPerformed
      private boolean da_permiso_para_acabar=false;
      public float[]matriz_parafinal=new float[0];
    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        if (isVariable_app()==false)
        {
        
        int suma_de_elementos=0;
          for (int i = 0; i < getContador_para_agregar() ; i++) 
          {
            suma_de_elementos=suma_de_elementos+mostrar[i];
          }
        if (suma_de_elementos>0)
        {
            setOn_off_arbol_cbt(true);
            /* PREGUNTAR SI LAS CONDICIONES SON IDEALES PARA HACER UN CBT*/
          /* GENERAR AL COMPLETE BINARY TREE*/
        int recursion_variable_index=0;
        /*nuestro array de ints*/   /*nuestra raiz*/                         
       //   COMPLETE_BYNARY_TREE.inserta_los_nodos_en_CBT(getMostrar(), COMPLETE_BYNARY_TREE.getNodo_raiz(), recursion_variable_index);
             /*       IMPRIMIR EL CBT         */
          if (getContador_para_modificacion()>0&&getConvertir_a_dynamic_array().size()>0) 
         {
             // System.out.println(" MAGNITUD DE MIERDA "+getConvertir_a_dynamic_array().size());   
             for (int i = 0; i < getConvertir_a_dynamic_array().size(); i++)
             {
                 if (mostrar[i]!=0)
                 {
                     System.out.println(mostrar[i]);
                 }
             } 
            System.out.println("se sabe que se modifico");
           // mostrar=convierte_a_array(getConvertir_a_dynamic_array());
            System.out.println(" ya puede pasar a otra fase");
            int magnitud_de_mostrar_max=0;
            ArrayList<Integer> paramaximo= new ArrayList<Integer>();  
            for (int i = 0; i<mostrar.length ; i++) 
            {
                if (mostrar[i]!=0) 
                {
                paramaximo.add(mostrar[i]);
                magnitud_de_mostrar_max++;    
                }
            }

            int para_metodos_de_arboles_max[]=new int[magnitud_de_mostrar_max];
             for (int i = 0; i < magnitud_de_mostrar_max; i++)
             {
                 para_metodos_de_arboles_max[i]=paramaximo.get(i);
                
             }
             
             System.out.println("                                              se usa cbt 2");
         /*   inserta_los_nodos_en_CBT_2(mostrar, COMPLETE_BYNARY_TREE.getNodo_raiz(), recursion_variable_index);
            recorre_ipreorder(mostrar,COMPLETE_BYNARY_TREE.getNodo_raiz());
            jTextArea1.setText(jTextArea1.getText()+"\nMatriz del CBT sin aplicar heapify:\n"+Arrays.toString(mostrar));*/
              inserta_los_nodos_en_CBT_2(para_metodos_de_arboles_max, COMPLETE_BYNARY_TREE.getNodo_raiz(), recursion_variable_index);
            recorre_ipreorder(para_metodos_de_arboles_max,COMPLETE_BYNARY_TREE.getNodo_raiz());
            jTextArea1.setText(jTextArea1.getText()+"\nMatriz del CBT sin aplicar heapify:\n"+Arrays.toString(para_metodos_de_arboles_max));
         }
          
          else if(getContador_para_modificacion()==0&&getConvertir_a_dynamic_array().size()>0)
          {
              
              int magnitud_de_mostrar_min=0;
                ArrayList<Integer> paraminimo= new ArrayList<Integer>();  
            for (int i = 0; i<mostrar.length ; i++) 
            {
                if (mostrar[i]!=0) 
                {
                paraminimo.add(mostrar[i]);
                magnitud_de_mostrar_min++;    
                }
            }
            
             int para_metodos_de_arboles_min[]=new int[magnitud_de_mostrar_min];
              for (int i = 0; i < paraminimo.size(); i++) 
              {
                 para_metodos_de_arboles_min[i]=paraminimo.get(i);
              }
         // mostrar=convierte_a_array(getConvertir_a_dynamic_array());
  
                            System.out.println("                                              se usa cbt 1");
         /* inserta_los_nodos_en_CBT(mostrar, COMPLETE_BYNARY_TREE.getNodo_raiz(), recursion_variable_index);       
           recorre_ipreorder(mostrar,COMPLETE_BYNARY_TREE.getNodo_raiz());
           jTextArea1.setText(jTextArea1.getText()+"\nMatriz del CBT sin aplicar heapify:\n"+Arrays.toString(mostrar));
         */ inserta_los_nodos_en_CBT(para_metodos_de_arboles_min, COMPLETE_BYNARY_TREE.getNodo_raiz(), recursion_variable_index);       
           recorre_ipreorder(para_metodos_de_arboles_min,COMPLETE_BYNARY_TREE.getNodo_raiz());
           jTextArea1.setText(jTextArea1.getText()+"\nMatriz del CBT sin aplicar heapify:\n"+Arrays.toString(para_metodos_de_arboles_min));
             
           
           
          }
                         /* nuestro array*/          /*nuestra raiz*/
        }else
             {
              JOptionPane.showMessageDialog(null,"Favor de ingresar datos en el array ");    
             }
        }else if(isVariable_app()==true)
        {
            int numero_metido=Integer.parseInt(jTextField1.getText());            
            if (numero_metido>=30&&numero_metido<=1000)
            {
                
                float[] matriz_buena=new float[COMPLETE_BYNARY_TREE.getMatriz_sin_ceros().size()];
                for (int i = 0; i < COMPLETE_BYNARY_TREE.getMatriz_sin_ceros().size(); i++) 
                {
                    matriz_buena[i]=COMPLETE_BYNARY_TREE.getMatriz_sin_ceros().get(i);
                }
                
                  int recursion_variable_index=0;
               //   matriz_parafinal=matriz
               
               inserta_los_nodos_en_CBT_app(matriz_buena, COMPLETE_BYNARY_TREE.getRaiz_float_arbol(), recursion_variable_index);
               recorre_ipreorder_float(matriz_buena, COMPLETE_BYNARY_TREE.getRaiz_float_arbol());
                setDa_permiso_para_acabar(true);
                setMatriz_parafinal(COMPLETE_BYNARY_TREE.devuelve_array_app(matriz_buena));
               
            }
            else
            {
               JOptionPane.showMessageDialog(null,"Favor de ingresar numeros entre 30 y 1000 ");    
            }
        }
        
    }//GEN-LAST:event_jButton3MouseClicked
     public Nodo inserta_los_nodos_en_CBT_2(int[] array, Nodo raiz_de_arbol,int decide_posicion_con_index) 
    { 
       System.out.println(" tamanio de array es "+array.length);
        if (decide_posicion_con_index < array.length) 
        {                               /* va a ir cambiando el valor*/
            Nodo recorre = new Nodo(array[decide_posicion_con_index]); 
            /*      igualamos los nodos    */
            raiz_de_arbol = recorre;
            if (array[decide_posicion_con_index]==array[0]) 
            {
                 setRaiz_de_cbt("Complete binary tree sin aplicar heapify :"+"\nLa raiz del arbol es :"+array[decide_posicion_con_index]);
                jTextArea1.setText(jTextArea1.getText()+getRaiz_de_cbt());
                System.out.println(jTextArea1.getText());
            }
            // si el index es (2*i+1) el hijo es izquierdo                                                           (2*i+1)
            raiz_de_arbol.hijo_izquierdo = inserta_los_nodos_en_CBT_2(array, raiz_de_arbol.getHijo_izquierdo(), 2 * decide_posicion_con_index + 1);
            // si el index es (2*i+2) el hijo es derecho                                                              (2*i+2)                                                     
            raiz_de_arbol.hijo_derecho = inserta_los_nodos_en_CBT_2(array, raiz_de_arbol.getHijo_derecho(),2 * decide_posicion_con_index + 2); 
        }
        COMPLETE_BYNARY_TREE.setNodo_raiz(raiz_de_arbol);
        return raiz_de_arbol;
    }  
    public Nodo_float inserta_los_nodos_en_CBT_app(float[] array, Nodo_float raiz_de_arbol_float,int decide_posicion_con_index) 
    { 
       System.out.println(" EL ARRAY A HACER ARBOL ES");
        for (int i = 0; i < array.length; i++)
        {
           System.out.println(array[i]);    
        }
        if (decide_posicion_con_index < array.length) 
        {                               /* va a ir cambiando el valor*/
            Nodo_float recorre = new Nodo_float(array[decide_posicion_con_index]); 
            /*      igualamos los nodos    */
            raiz_de_arbol_float = recorre;
            
            if (array[decide_posicion_con_index]==array[0]) 
            {
                setRaiz_de_cbt("Complete binary tree sin aplicar heapify :"+"\nLa raiz del arbol es :"+array[decide_posicion_con_index]);
                jTextArea1.setText(jTextArea1.getText()+getRaiz_de_cbt());
                System.out.println(jTextArea1.getText());
            }
            // si el index es (2*i+1) el hijo es izquierdo                                                           (2*i+1)
            raiz_de_arbol_float.hijo_izquierdo=inserta_los_nodos_en_CBT_app(array, raiz_de_arbol_float.hijo_izquierdo, 2 * decide_posicion_con_index + 1);
            // si el index es (2*i+2) el hijo es derecho                                                              (2*i+2)                                                     
            raiz_de_arbol_float.hijo_derecho=inserta_los_nodos_en_CBT_app(array, raiz_de_arbol_float.hijo_derecho,2 * decide_posicion_con_index + 2); 
        }
        COMPLETE_BYNARY_TREE.setRaiz_float_arbol(raiz_de_arbol_float);
        return raiz_de_arbol_float; 
    }  
    public Nodo inserta_los_nodos_en_CBT(int[] array, Nodo raiz_de_arbol,int decide_posicion_con_index) 
    { 
        System.out.println(" EL ARRAY A HACER ARBOL ES");
        for (int i = 0; i < array.length; i++)
        {
            System.out.println(array[i]);    
        }
        if (decide_posicion_con_index < array.length) 
        {                               /* va a ir cambiando el valor*/
            Nodo recorre = new Nodo(array[decide_posicion_con_index]); 
            /*      igualamos los nodos    */
            raiz_de_arbol = recorre;
            
            if (array[decide_posicion_con_index]==array[0]) 
            {
                setRaiz_de_cbt("Complete binary tree sin aplicar heapify :"+"\nLa raiz del arbol es :"+array[decide_posicion_con_index]);
                jTextArea1.setText(jTextArea1.getText()+getRaiz_de_cbt());
                System.out.println(jTextArea1.getText());
            }
            // si el index es (2*i+1) el hijo es izquierdo                                                           (2*i+1)
            raiz_de_arbol.hijo_izquierdo = inserta_los_nodos_en_CBT(array, raiz_de_arbol.getHijo_izquierdo(), 2 * decide_posicion_con_index + 1);
            // si el index es (2*i+2) el hijo es derecho                                                              (2*i+2)                                                     
            raiz_de_arbol.hijo_derecho = inserta_los_nodos_en_CBT(array, raiz_de_arbol.getHijo_derecho(),2 * decide_posicion_con_index + 2); 
        }
        COMPLETE_BYNARY_TREE.setNodo_raiz(raiz_de_arbol);
        return raiz_de_arbol; 
    } 
    public Nodo inserta_los_nodos_en_CBT_minheapify(int[] array, Nodo raiz_de_arbol,int decide_posicion_con_index) 
    { 
        System.out.println(" EL ARRAY A HACER ARBOL ES");
        for (int i = 0; i < array.length; i++)
        {
            System.out.println(array[i]);    
        }
        if (decide_posicion_con_index < array.length) 
        {                               /* va a ir cambiando el valor*/
            Nodo recorre = new Nodo(array[decide_posicion_con_index]); 
            /*      igualamos los nodos    */
            raiz_de_arbol = recorre;
            if (array[decide_posicion_con_index]==array[0]) 
            {
                setRaiz_de_cbt("Complete binary tree aplicando min heapify :"+"\nLa raiz del arbol es :"+array[decide_posicion_con_index]);
                jTextArea1.setText(jTextArea1.getText()+getRaiz_de_cbt());
            }
            // si el index es (2*i+1) el hijo es izquierdo                                                           (2*i+1)
            raiz_de_arbol.hijo_izquierdo = inserta_los_nodos_en_CBT_minheapify(array, raiz_de_arbol.getHijo_izquierdo(), 2 * decide_posicion_con_index + 1);
            // si el index es (2*i+2) el hijo es derecho                                                              (2*i+2)                                                     
            raiz_de_arbol.hijo_derecho = inserta_los_nodos_en_CBT_minheapify(array, raiz_de_arbol.getHijo_derecho(),2 * decide_posicion_con_index + 2); 
        }
        COMPLETE_BYNARY_TREE.setNodo_raiz(raiz_de_arbol);
        return raiz_de_arbol; 
    }
     public Nodo_float inserta_los_nodos_en_CBT_minheapify_float(float[] array, Nodo_float raiz_de_arbol,int decide_posicion_con_index) 
    { 
        System.out.println(" EL ARRAY A HACER ARBOL ES");
        for (int i = 0; i < array.length; i++)
        {
           System.out.println(array[i]);    
        }
        if (decide_posicion_con_index < array.length) 
        {                               /* va a ir cambiando el valor*/
            Nodo_float recorre = new Nodo_float(array[decide_posicion_con_index]); 
            /*      igualamos los nodos    */
            raiz_de_arbol = recorre;
            if (array[decide_posicion_con_index]==array[0]) 
            {
                setRaiz_de_cbt("Complete binary tree aplicando min heapify :"+"\nLa raiz del arbol es :"+array[decide_posicion_con_index]);
                jTextArea1.setText(jTextArea1.getText()+getRaiz_de_cbt());
            }
            // si el index es (2*i+1) el hijo es izquierdo                                                           (2*i+1)
            raiz_de_arbol.hijo_izquierdo = inserta_los_nodos_en_CBT_minheapify_float(array, raiz_de_arbol.getHijo_izquierdo(), 2 * decide_posicion_con_index + 1);
            // si el index es (2*i+2) el hijo es derecho                                                              (2*i+2)                                                     
            raiz_de_arbol.hijo_derecho = inserta_los_nodos_en_CBT_minheapify_float(array, raiz_de_arbol.getHijo_derecho(),2 * decide_posicion_con_index + 2); 
        }
        COMPLETE_BYNARY_TREE.setRaiz_float_arbol(raiz_de_arbol);
        return raiz_de_arbol; 
    }
    public Nodo inserta_los_nodos_en_CBT_maxheapify(int[] array, Nodo raiz_de_arbol,int decide_posicion_con_index) 
    { 
        for (int i = 0; i < array.length; i++)
        {
        }
        if (decide_posicion_con_index < array.length) 
        {                               /* va a ir cambiando el valor*/
            Nodo recorre = new Nodo(array[decide_posicion_con_index]); 
            /*      igualamos los nodos    */
            raiz_de_arbol = recorre;
            if (array[decide_posicion_con_index]==array[0]) 
            {
                setRaiz_de_cbt("Complete binary tree aplicando max heapify :"+"\nLa raiz del arbol es :"+array[decide_posicion_con_index]);
                jTextArea1.setText(jTextArea1.getText()+getRaiz_de_cbt());
            }
            // si el index es (2*i+1) el hijo es izquierdo                                                           (2*i+1)
            raiz_de_arbol.hijo_izquierdo = inserta_los_nodos_en_CBT_maxheapify(array, raiz_de_arbol.getHijo_izquierdo(), 2 * decide_posicion_con_index + 1);
            // si el index es (2*i+2) el hijo es derecho                                                              (2*i+2)                                                     
            raiz_de_arbol.hijo_derecho = inserta_los_nodos_en_CBT_maxheapify(array, raiz_de_arbol.getHijo_derecho(),2 * decide_posicion_con_index + 2); 
        }
        COMPLETE_BYNARY_TREE.setNodo_raiz(raiz_de_arbol);
        return raiz_de_arbol; 
    }
    public Nodo_float inserta_los_nodos_en_CBT_maxheapify_float(float[] array, Nodo_float raiz_de_arbol,int decide_posicion_con_index) 
    { 
        for (int i = 0; i < array.length; i++)
        {
        }
        if (decide_posicion_con_index < array.length) 
        {                               /* va a ir cambiando el valor*/
            Nodo_float recorre = new Nodo_float(array[decide_posicion_con_index]); 
            /*      igualamos los nodos    */
            raiz_de_arbol = recorre;
            if (array[decide_posicion_con_index]==array[0]) 
            {
                setRaiz_de_cbt("Complete binary tree aplicando max heapify :"+"\nLa raiz del arbol es :"+array[decide_posicion_con_index]);
                jTextArea1.setText(jTextArea1.getText()+getRaiz_de_cbt());
            }
            // si el index es (2*i+1) el hijo es izquierdo                                                           (2*i+1)
            raiz_de_arbol.hijo_izquierdo = inserta_los_nodos_en_CBT_maxheapify_float(array, raiz_de_arbol.getHijo_izquierdo(), 2 * decide_posicion_con_index + 1);
            // si el index es (2*i+2) el hijo es derecho                                                              (2*i+2)                                                     
            raiz_de_arbol.hijo_derecho = inserta_los_nodos_en_CBT_maxheapify_float(array, raiz_de_arbol.getHijo_derecho(),2 * decide_posicion_con_index + 2); 
        }
        COMPLETE_BYNARY_TREE.setRaiz_float_arbol(raiz_de_arbol);
        return raiz_de_arbol; 
    }
     public void recorre_ipreorder_float(float[] array, Nodo_float raiz_de_arbol)
      {
        if (raiz_de_arbol != null) 
        { 
            if (raiz_de_arbol.getHijo_derecho()!=null&&raiz_de_arbol.getHijo_izquierdo()!=null)
            {
                setRaiz_de_cbt(getRaiz_de_cbt() + "\n El nodo " + raiz_de_arbol.getHijo_derecho().getDato_dentro() + " es hijo derecho de " + raiz_de_arbol.getDato_dentro() + " y el nodo " + raiz_de_arbol.getHijo_izquierdo().getDato_dentro() + " es su hijo izquierdo ");   
                jTextArea1.setText(getRaiz_de_cbt());
            }
            else if (raiz_de_arbol.getHijo_derecho()!=null&&raiz_de_arbol.getHijo_izquierdo()==null)
            {
                setRaiz_de_cbt(getRaiz_de_cbt() + "\n El nodo " + raiz_de_arbol.getHijo_derecho().getDato_dentro() + " es hijo derech del nodo " + raiz_de_arbol.getDato_dentro());              
                jTextArea1.setText(getRaiz_de_cbt());
            } 
            else if(raiz_de_arbol.getHijo_derecho()==null&&raiz_de_arbol.getHijo_izquierdo()!=null)
            {
                setRaiz_de_cbt(getRaiz_de_cbt() + "\n El nodo " + raiz_de_arbol.getHijo_izquierdo().getDato_dentro() + " es hijo izquierdo del nodo " + raiz_de_arbol.getDato_dentro());   
                jTextArea1.setText(getRaiz_de_cbt());
            }
           System.out.println(raiz_de_arbol.getDato_dentro() + " "); 
            recorre_ipreorder_float(array,raiz_de_arbol.getHijo_izquierdo()); 
            recorre_ipreorder_float(array,raiz_de_arbol.getHijo_derecho()); 
        }     
      }
      public void recorre_ipreorder(int[] array, Nodo raiz_de_arbol)
      {
        if (raiz_de_arbol != null) 
        { 
            if (raiz_de_arbol.getHijo_derecho()!=null&&raiz_de_arbol.getHijo_izquierdo()!=null)
            {
                setRaiz_de_cbt(getRaiz_de_cbt() + "\n El nodo " + raiz_de_arbol.getHijo_derecho().getDato_dentro() + " es hijo derecho de " + raiz_de_arbol.getDato_dentro() + " y el nodo " + raiz_de_arbol.getHijo_izquierdo().getDato_dentro() + " es su hijo izquierdo ");   
                jTextArea1.setText(getRaiz_de_cbt());
            }
            else if (raiz_de_arbol.getHijo_derecho()!=null&&raiz_de_arbol.getHijo_izquierdo()==null)
            {
                setRaiz_de_cbt(getRaiz_de_cbt() + "\n El nodo " + raiz_de_arbol.getHijo_derecho().getDato_dentro() + " es hijo derech del nodo " + raiz_de_arbol.getDato_dentro());              
                jTextArea1.setText(getRaiz_de_cbt());
            } 
            else if(raiz_de_arbol.getHijo_derecho()==null&&raiz_de_arbol.getHijo_izquierdo()!=null)
            {
                setRaiz_de_cbt(getRaiz_de_cbt() + "\n El nodo " + raiz_de_arbol.getHijo_izquierdo().getDato_dentro() + " es hijo izquierdo del nodo " + raiz_de_arbol.getDato_dentro());   
                jTextArea1.setText(getRaiz_de_cbt());
            }
            System.out.println(raiz_de_arbol.getDato_dentro() + " "); 
            recorre_ipreorder(array,raiz_de_arbol.getHijo_izquierdo()); 
            recorre_ipreorder(array,raiz_de_arbol.getHijo_derecho()); 
        }     
      }
    private void jTextArea1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyTyped
        evt.consume();
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextArea1KeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
      public void close()
      {
          WindowEvent winClosingEvent =new WindowEvent(this,WindowEvent.WINDOW_CLOSING);    
          Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(winClosingEvent);
      }
    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:
     /* LLAMAMOS A LA OTRA CLASE PARA QUE NOS HAGA INVISIBLE ESTA VENTANA */
         close();
         Pantalla_de_ejecucion regresamos_a_menu_principal= new Pantalla_de_ejecucion();
         regresamos_a_menu_principal.setVisible(true);
    }//GEN-LAST:event_jButton5MouseClicked
 public void recorre_ipreorder_2(int[] array, Nodo raiz_de_arbol)
      {
        if (raiz_de_arbol != null) 
        { 
            if (raiz_de_arbol.getHijo_derecho()!=null&&raiz_de_arbol.getHijo_izquierdo()!=null)
            {
                setRaiz_de_cbt(getRaiz_de_cbt() + "\n El nodo " + raiz_de_arbol.getHijo_derecho().getDato_dentro() + " es hijo derecho de " + raiz_de_arbol.getDato_dentro() + " y el nodo " + raiz_de_arbol.getHijo_izquierdo().getDato_dentro() + " es su hijo izquierdo ");   
                jTextArea1.setText(getRaiz_de_cbt());
            }
            else if (raiz_de_arbol.getHijo_derecho()!=null&&raiz_de_arbol.getHijo_izquierdo()==null)
            {
                setRaiz_de_cbt(getRaiz_de_cbt() + "\n El nodo " + raiz_de_arbol.getHijo_derecho().getDato_dentro() + " es hijo derech del nodo " + raiz_de_arbol.getDato_dentro());              
                jTextArea1.setText(getRaiz_de_cbt());
            } 
            else if(raiz_de_arbol.getHijo_derecho()==null&&raiz_de_arbol.getHijo_izquierdo()!=null)
            {
                setRaiz_de_cbt(getRaiz_de_cbt() + "\n El nodo " + raiz_de_arbol.getHijo_izquierdo().getDato_dentro() + " es hijo izquierdo del nodo " + raiz_de_arbol.getDato_dentro());   
                jTextArea1.setText(getRaiz_de_cbt());
            }
            recorre_ipreorder_2(array,raiz_de_arbol.getHijo_izquierdo()); 
            recorre_ipreorder_2(array,raiz_de_arbol.getHijo_derecho()); 
        }     
      }
 public void recorre_ipreorder_2_float(float[] array, Nodo_float raiz_de_arbol)
      {
        if (raiz_de_arbol != null) 
        { 
            if (raiz_de_arbol.getHijo_derecho()!=null&&raiz_de_arbol.getHijo_izquierdo()!=null)
            {
                setRaiz_de_cbt(getRaiz_de_cbt() + "\n El nodo " + raiz_de_arbol.getHijo_derecho().getDato_dentro() + " es hijo derecho de " + raiz_de_arbol.getDato_dentro() + " y el nodo " + raiz_de_arbol.getHijo_izquierdo().getDato_dentro() + " es su hijo izquierdo ");   
                jTextArea1.setText(getRaiz_de_cbt());
            }
            else if (raiz_de_arbol.getHijo_derecho()!=null&&raiz_de_arbol.getHijo_izquierdo()==null)
            {
                setRaiz_de_cbt(getRaiz_de_cbt() + "\n El nodo " + raiz_de_arbol.getHijo_derecho().getDato_dentro() + " es hijo derech del nodo " + raiz_de_arbol.getDato_dentro());              
                jTextArea1.setText(getRaiz_de_cbt());
            } 
            else if(raiz_de_arbol.getHijo_derecho()==null&&raiz_de_arbol.getHijo_izquierdo()!=null)
            {
                setRaiz_de_cbt(getRaiz_de_cbt() + "\n El nodo " + raiz_de_arbol.getHijo_izquierdo().getDato_dentro() + " es hijo izquierdo del nodo " + raiz_de_arbol.getDato_dentro());   
                jTextArea1.setText(getRaiz_de_cbt());
            }
            recorre_ipreorder_2_float(array,raiz_de_arbol.getHijo_izquierdo()); 
            recorre_ipreorder_2_float(array,raiz_de_arbol.getHijo_derecho()); 
        }     
      }
    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        Algorithm2 hacerproceso =new Algorithm2();
        /*      OBTENEMOS EL HEAP    */
        int recursion_variable_index=0;
          
          /* PARA MOSTRAR EL MIN HEAP*/
         if (isVariable_app()==false) 
         {
            
         
          int suma_de_elementos=0;
          for (int i = 0; i < mostrar.length ; i++) 
          {
            suma_de_elementos=suma_de_elementos+mostrar[i];
           // Para_min_heapify[i]=mostrar[i];
          }
        
        if (suma_de_elementos>0)
        {
        /*         int magnitud_de_mostrar_min=0;
                ArrayList<Integer> paraminimo= new ArrayList<Integer>();  
            for (int i = 0; i<mostrar.length ; i++) 
            {
                if (mostrar[i]!=0) 
                {
                paraminimo.add(mostrar[i]);
                magnitud_de_mostrar_min++;    
                }
            }
            
             int para_metodos_de_arboles_min[]=new int[magnitud_de_mostrar_min];
              for (int i = 0; i < paraminimo.size(); i++) 
              {
                 para_metodos_de_arboles_min[i]=paraminimo.get(i);
              }
         */
            int magnitud_1=0;
           ArrayList<Integer> para_heapsort= new ArrayList<Integer>(); 
          
            for (int i = 0; i < mostrar.length ; i++) 
          {
              if (mostrar[i]!=0) 
              {
              para_heapsort.add(mostrar[i]);
              magnitud_1++;
              }
          }
             int Para_min_heapify[]=new int[magnitud_1];
        
            for (int i = 0; i < para_heapsort.size() ; i++) 
          {
            Para_min_heapify[i]=para_heapsort.get(i);
          }
            
            
            
           hacerproceso.Min_Heap(Para_min_heapify);
           inserta_los_nodos_en_CBT_minheapify(Para_min_heapify, COMPLETE_BYNARY_TREE.getNodo_raiz(), recursion_variable_index);
           recorre_ipreorder_2(Para_min_heapify, COMPLETE_BYNARY_TREE.getNodo_raiz());
           jTextArea1.setText(jTextArea1.getText()+"\nMatriz del CBT al aplicarle min heapify:\n"+Arrays.toString(Para_min_heapify));
           jTextArea1.setText(jTextArea1.getText()+"\n/////////////////////////////////Max Heap///////////////////////////////\n");
           setMuestra_los_dos_heaps(jTextArea1.getText());
           recursion_variable_index=0;
       int magnitud_2=0;
           ArrayList<Integer> para_heapsort_2= new ArrayList<Integer>(); 
          
            for (int i = 0; i < mostrar.length ; i++) 
          {
              if (mostrar[i]!=0) 
              {
              para_heapsort_2.add(mostrar[i]);
              magnitud_2++;
              }
          }
             int Para_max_heapify[]=new int[magnitud_2];
        
            for (int i = 0; i < para_heapsort.size() ; i++) 
          {
            Para_max_heapify[i]=para_heapsort.get(i);
          }
           /*   NOS DA LA BASE PARA EL CBT CON EL HEAPIFY  */
        hacerproceso.Max_Heap(Para_max_heapify);
        /*   LO METEMOS EN IRDEN HEAPIFY    */ 
        inserta_los_nodos_en_CBT_maxheapify(Para_max_heapify, COMPLETE_BYNARY_TREE.getNodo_raiz(), recursion_variable_index);
        recorre_ipreorder_2(Para_max_heapify, COMPLETE_BYNARY_TREE.getNodo_raiz());
        jTextArea1.setText(getMuestra_los_dos_heaps()+jTextArea1.getText());
        jTextArea1.setText(jTextArea1.getText()+"\nMatriz del CBT al aplicarle max heapify:\n"+Arrays.toString(Para_max_heapify)); 
       jTextArea1.setText(jTextArea1.getText()+"\n////////////////////////////////////////////////////////////////////////////\n"+"Resultado del algoritmo heapsort (max heap):\n"+hacerproceso.ultimo_max_heap(Para_max_heapify.length,Para_max_heapify)
        +"\nResultado del algoritmo heapsort (min heap):\n"+hacerproceso.ultimo_min_heap(Para_min_heapify.length,Para_min_heapify));
         System.out.println("  ");   
        
        }
        else
        {
              JOptionPane.showMessageDialog(null,"Favor de ingresar datos en el array ");    
        }
        }else if (isVariable_app()==true&&isDa_permiso_para_acabar()==true) 
        {
           hacerproceso.Min_Heap_float(getMatriz_parafinal());
           inserta_los_nodos_en_CBT_minheapify_float(matriz_parafinal, COMPLETE_BYNARY_TREE.getRaiz_float_arbol(), recursion_variable_index);
           recorre_ipreorder_2_float(matriz_parafinal, COMPLETE_BYNARY_TREE.getRaiz_float_arbol());
           jTextArea1.setText(jTextArea1.getText()+"\nMatriz del CBT al aplicarle min heapify:\n"+Arrays.toString(matriz_parafinal));
           jTextArea1.setText(jTextArea1.getText()+"\n/////////////////////////////////Max Heap///////////////////////////////\n");
           
           setMuestra_los_dos_heaps(jTextArea1.getText());
           recursion_variable_index=0;
           float copia_de_matriz[]=new float[matriz_parafinal.length];
            for (int i = 0; i < matriz_parafinal.length; i++)
            {
                copia_de_matriz[i]=matriz_parafinal[i];
            }
        /*   NOS DA LA BASE PARA EL CBT CON EL HEAPIFY  */
        hacerproceso.Max_Heap_float(copia_de_matriz);
        /*   LO METEMOS EN IRDEN HEAPIFY    */ 
        inserta_los_nodos_en_CBT_maxheapify_float(copia_de_matriz, COMPLETE_BYNARY_TREE.getRaiz_float_arbol(), recursion_variable_index);
        recorre_ipreorder_2_float(copia_de_matriz, COMPLETE_BYNARY_TREE.getRaiz_float_arbol());
        jTextArea1.setText(getMuestra_los_dos_heaps()+jTextArea1.getText());
        jTextArea1.setText(jTextArea1.getText()+"\nMatriz del CBT al aplicarle max heapify:\n"+Arrays.toString(copia_de_matriz)); 
       jTextArea1.setText(jTextArea1.getText()+"\n////////////////////////////////////////////////////////////////////////////\n"+"Resultado del algoritmo heapsort (max heap):\n"+hacerproceso.ultimo_max_heap_float(matriz_parafinal.length, matriz_parafinal)
        +"\nResultado del algoritmo heapsort (min heap):\n"+hacerproceso.ultimo_min_heap_float(copia_de_matriz.length, copia_de_matriz)+"\n");
        /*      NECESITAMOS COMPARAR LOS PROMEDIOS CON LA MATRIZ DE PROMEDIOS OBTENIDA EN LA CLASE CBT       */
        /*      ACCEDER A SU INDICE PARA IMPRIMIR DE FORMA ORDENADA LAS STRINGS          */
          
        float para_imprimir_ordenaditoxD[]=new float[matriz_parafinal.length];
           /* for (int i = 0; i < COMPLETE_BYNARY_TREE.getMatriz_sin_ceros().size(); i++)
            {
                System.out.println(copia_de_matriz[i]);
            }
            System.out.println("               PRUEBA                      ");*/
        for (int i = 0; i < COMPLETE_BYNARY_TREE.getMatriz_sin_ceros().size(); i++)
            {
               para_imprimir_ordenaditoxD[i]=COMPLETE_BYNARY_TREE.getMatriz_sin_ceros().get(i);
            }
        jTextArea1.setText(jTextArea1.getText()+"\n"+"//////////////////////////////DATOS ORDENADOS MIN HEAP///////////////////////////////\n");
        int muestra_min_heap[]=new int [para_imprimir_ordenaditoxD.length];       
        for (int i = 0; i < para_imprimir_ordenaditoxD.length; i++)
            {
                jTextArea1.setText(jTextArea1.getText()+COMPLETE_BYNARY_TREE.getSolucion_de_problema().get(COMPLETE_BYNARY_TREE.getMatriz_sin_ceros().indexOf(copia_de_matriz[i]))+"\n");
            }
        
        jTextArea1.setText(jTextArea1.getText()+"\n//////////////////////////////DATOS ORDENADOS MAX HEAP///////////////////////////////\n");
            for (int i = 0; i < para_imprimir_ordenaditoxD.length; i++)
            {
            jTextArea1.setText(jTextArea1.getText()+COMPLETE_BYNARY_TREE.getSolucion_de_problema().get(COMPLETE_BYNARY_TREE.getMatriz_sin_ceros().indexOf(matriz_parafinal[i]))+"\n");
            }   
       
       
        }
         
    }//GEN-LAST:event_jButton4MouseClicked
/*ARRAY QUE CREAMOS CON EL USUARIO*//* EL NODO QUE NOS DEVUELVE LA FUNCION DEL CBT*/
    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed
       public void desaparece_boton_instrucciones()
       {
           /* DESAPARECEN EN LAS INSTRUCCIONES */
           instrucciones_completas();
           button_ingresa_datos_matriz.setVisible(false);
           field_text_para_datos_matriz.setVisible(false);
           jScrollPane1.setVisible(false);
           jLabel4.setVisible(false);
           jLabel5.setVisible(false);
           jButton1.setVisible(false);
           jButton2.setVisible(false);
           jButton3.setVisible(false);
           jButton4.setVisible(false);
           jButton5.setVisible(false);
           jButton6.setVisible(false);
           jLabel7.setVisible(false);
           jTextArea1.setVisible(false);
           jScrollPane1.setVisible(false);
           jScrollPane2.setVisible(false);
           /* borrar la que pertenesca al tamanio */
           Timer timer =new Timer();
          TimerTask aparece_boton = new TimerTask()
          {
            @Override
            public void run()
            {
                /* DESAPARECEN EN PROCESO DE LAS INSTRUCCIONES */
                button_ingresa_datos_matriz.setVisible(true);
                jScrollPane1.setVisible(true);
                field_text_para_datos_matriz.setVisible(true);
                jLabel3.setVisible(false);
                jLabel2.setVisible(false);
                jLabel4.setVisible(true);
                jLabel5.setVisible(true);
                jTextArea1.setVisible(true);
                jScrollPane1.setVisible(true);
                jScrollPane2.setVisible(true);
                jButton1.setVisible(true);
                jButton2.setVisible(true);
                jButton3.setVisible(true);
                jButton4.setVisible(true);
                jLabel7.setVisible(false);
                jButton5.setVisible(true);
                jButton6.setVisible(true);
                jLabel6.setVisible(false);
            }
         };     
                 timer.schedule(aparece_boton, 17000);
       }
       public void desaparece_jlabels_instrucciones()
       {   
           jButton6.setVisible(false);
           jLabel3.setVisible(false);
           jLabel2.setVisible(false);
       }
       public void instrucciones_completas()
       {   
           jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/heap_sort/imagenes/instrucciones_bien.png")));
           jLabel6.setVisible(true);
       }
    
    /**
     * @param args the command line arguments
     */
      public static  HACE_PROGRAMA application_2 =new HACE_PROGRAMA();
   
 public static void main(String args[]) 
 {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
       
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() 
        {
            public void run() 
            {
                application_2.setVisible(true);
            }
        });
    }
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_ingresa_datos_matriz;
    private javax.swing.JTextField field_text_para_datos_matriz;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    public javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the ingreso_a_dinamic_array
     */
    public int getIngreso_a_dinamic_array() {
        return ingreso_a_dinamic_array;
    }

    /**
     * @param ingreso_a_dinamic_array the ingreso_a_dinamic_array to set
     */
    public void setIngreso_a_dinamic_array(int ingreso_a_dinamic_array) {
        this.ingreso_a_dinamic_array = ingreso_a_dinamic_array;
    }

    /**
     * @return the numero_para_la_matriz
     */
    public int getNumero_para_la_matriz() {
        return numero_para_la_matriz;
    }

    /**
     * @param numero_para_la_matriz the numero_para_la_matriz to set
     */
    public void setNumero_para_la_matriz(int numero_para_la_matriz) {
        this.numero_para_la_matriz = numero_para_la_matriz;
    }

    /**
     * @return the index_de_agregacion
     */
    public int getIndex_de_agregacion() {
        return index_de_agregacion;
    }

    /**
     * @param index_de_agregacion the index_de_agregacion to set
     */
    public void setIndex_de_agregacion(int index_de_agregacion) {
        this.index_de_agregacion = index_de_agregacion;
    }

    /**
     * @return the tamanio_array
     */
    public int getTamanio_array() {
        return tamanio_array;
    }

    /**
     * @param tamanio_array the tamanio_array to set
     */
    public void setTamanio_array(int tamanio_array) {
        this.tamanio_array = tamanio_array;
    }

    /**
     * @return the cadena_en_text_field
     */
    public String getCadena_en_text_field() {
        return cadena_en_text_field;
    }

    /**
     * @param cadena_en_text_field the cadena_en_text_field to set
     */
    public void setCadena_en_text_field(String cadena_en_text_field) {
        this.cadena_en_text_field = cadena_en_text_field;
    }

    /**
     * @return the Complete_binary_tree_array
     */
    public ArrayList<Integer> getComplete_binary_tree_array() {
        return Complete_binary_tree_array;
    }

    /**
     * @param Complete_binary_tree_array the Complete_binary_tree_array to s1et
     */
    public void setComplete_binary_tree_array(ArrayList<Integer> Complete_binary_tree_array) {
        this.Complete_binary_tree_array = Complete_binary_tree_array;
    }
    
    /**
     * @return the contador_para_agregar
     */
    public int getContador_para_agregar() {
        return contador_para_agregar;
    }

    /**
     * @param contador_para_agregar the contador_para_agregar to set
     */
    public void setContador_para_agregar(int contador_para_agregar) {
        this.contador_para_agregar = contador_para_agregar;
    }

    /**
     * @return the auxiliar
     */
    public ArrayList<Integer> getAuxiliar() {
        return auxiliar;
    }

    /**
     * @param auxiliar the auxiliar to set
     */
    public void setAuxiliar(ArrayList<Integer> auxiliar) {
        this.auxiliar = auxiliar;
    }

    /**
     * @return the contador_para_auxiliar
     */
    public int getContador_para_auxiliar() {
        return contador_para_auxiliar;
    }

    /**
     * @param contador_para_auxiliar the contador_para_auxiliar to set
     */
    public void setContador_para_auxiliar(int contador_para_auxiliar) {
        this.contador_para_auxiliar = contador_para_auxiliar;
    }

    /**
     * @return the COMPLETE_BYNARY_TREE
     */
    public Complete_binary_tree getCOMPLETE_BYNARY_TREE() {
        return COMPLETE_BYNARY_TREE;
    }

    /**
     * @param COMPLETE_BYNARY_TREE the COMPLETE_BYNARY_TREE to set
     */
    public void setCOMPLETE_BYNARY_TREE(Complete_binary_tree COMPLETE_BYNARY_TREE) {
        this.COMPLETE_BYNARY_TREE = COMPLETE_BYNARY_TREE;
    }

    /**
     * @return the mostrar
     */
    public int[] getMostrar() {
        return mostrar;
    }

    /**
     * @param mostrar the mostrar to set
     */
    public void setMostrar(int[] mostrar) {
        this.mostrar = mostrar;
    }

    /**
     * @return the obtiene_matriz
     */
    public String getObtiene_matriz() {
        return obtiene_matriz;
    }

    /**
     * @param obtiene_matriz the obtiene_matriz to set
     */
    public void setObtiene_matriz(String obtiene_matriz) {
        this.obtiene_matriz = obtiene_matriz;
    }

    /**
     * @return the raiz_de_cbt
     */
    public String getRaiz_de_cbt() {
        return raiz_de_cbt;
    }

    /**
     * @param raiz_de_cbt the raiz_de_cbt to set
     */
    public void setRaiz_de_cbt(String raiz_de_cbt) {
        this.raiz_de_cbt = raiz_de_cbt;
    }

    /**
     * @return the convertir_a_dynamic_array
     */
    public ArrayList<Integer> getConvertir_a_dynamic_array() {
        return convertir_a_dynamic_array;
    }

    /**
     * @param convertir_a_dynamic_array the convertir_a_dynamic_array to set
     */
    public void setConvertir_a_dynamic_array(ArrayList<Integer> convertir_a_dynamic_array) {
        this.convertir_a_dynamic_array = convertir_a_dynamic_array;
    }

    /**
     * @return the se_ha_modificado_array
     */
    public boolean isSe_ha_modificado_array() {
        return se_ha_modificado_array;
    }

    /**
     * @param se_ha_modificado_array the se_ha_modificado_array to set
     */
    public void setSe_ha_modificado_array(boolean se_ha_modificado_array) {
        this.se_ha_modificado_array = se_ha_modificado_array;
    }

    /**
     * @return the contador_para_modificacion
     */
    public int getContador_para_modificacion() {
        return contador_para_modificacion;
    }

    /**
     * @param contador_para_modificacion the contador_para_modificacion to set
     */
    public void setContador_para_modificacion(int contador_para_modificacion) {
        this.contador_para_modificacion = contador_para_modificacion;
    }

    /**
     * @return the variable_comprueba_vaciado
     */
    public int getVariable_comprueba_vaciado() {
        return variable_comprueba_vaciado;
    }

    /**
     * @param variable_comprueba_vaciado the variable_comprueba_vaciado to set
     */
    public void setVariable_comprueba_vaciado(int variable_comprueba_vaciado) {
        this.variable_comprueba_vaciado = variable_comprueba_vaciado;
    }

    /**
     * @return the variable_se_ingresan_datos_despues_de_vaciado
     */
    public int getVariable_se_ingresan_datos_despues_de_vaciado() {
        return variable_se_ingresan_datos_despues_de_vaciado;
    }

    /**
     * @param variable_se_ingresan_datos_despues_de_vaciado the variable_se_ingresan_datos_despues_de_vaciado to set
     */
    public void setVariable_se_ingresan_datos_despues_de_vaciado(int variable_se_ingresan_datos_despues_de_vaciado) {
        this.variable_se_ingresan_datos_despues_de_vaciado = variable_se_ingresan_datos_despues_de_vaciado;
    }

    /**
     * @return the aplica_Algorithm
     */
    public Algorithm2 getAplica_Algorithm() {
        return aplica_Algorithm;
    }

    /**
     * @param aplica_Algorithm the aplica_Algorithm to set
     */
    public void setAplica_Algorithm(Algorithm2 aplica_Algorithm) {
        this.aplica_Algorithm = aplica_Algorithm;
    }

    /**
     * @return the Para_imprimir
     */
    public String getPara_imprimir() {
        return Para_imprimir;
    }

    /**
     * @param Para_imprimir the Para_imprimir to set
     */
    public void setPara_imprimir(String Para_imprimir) {
        this.Para_imprimir = Para_imprimir;
    }

    /**
     * @return the variable_se_aplica_heapify
     */
    public boolean isVariable_se_aplica_heapify() {
        return variable_se_aplica_heapify;
    }

    /**
     * @param variable_se_aplica_heapify the variable_se_aplica_heapify to set
     */
    public void setVariable_se_aplica_heapify(boolean variable_se_aplica_heapify) {
        this.variable_se_aplica_heapify = variable_se_aplica_heapify;
    }

    /**
     * @return the muestra_los_dos_heaps
     */
    public String getMuestra_los_dos_heaps() {
        return muestra_los_dos_heaps;
    }

    /**
     * @param muestra_los_dos_heaps the muestra_los_dos_heaps to set
     */
    public void setMuestra_los_dos_heaps(String muestra_los_dos_heaps) {
        this.muestra_los_dos_heaps = muestra_los_dos_heaps;
    }

    /**
     * @return the on_off_arbol_cbt
     */
    public boolean isOn_off_arbol_cbt() {
        return on_off_arbol_cbt;
    }

    /**
     * @param on_off_arbol_cbt the on_off_arbol_cbt to set
     */
    public void setOn_off_arbol_cbt(boolean on_off_arbol_cbt) {
        this.on_off_arbol_cbt = on_off_arbol_cbt;
    }

    /**
     * @return the variable_app
     */
    public boolean isVariable_app() {
        return variable_app;
    }

    /**
     * @param variable_app the variable_app to set
     */
    public void setVariable_app(boolean variable_app) {
        this.variable_app = variable_app;
    }

    /**
     * @return the numero_de_alumnos
     */
    public int getNumero_de_alumnos() {
        return numero_de_alumnos;
    }

    /**
     * @param numero_de_alumnos the numero_de_alumnos to set
     */
    public void setNumero_de_alumnos(int numero_de_alumnos) {
        this.numero_de_alumnos = numero_de_alumnos;
    }

    /**
     * @return the da_permiso_para_acabar
     */
    public boolean isDa_permiso_para_acabar() {
        return da_permiso_para_acabar;
    }

    /**
     * @param da_permiso_para_acabar the da_permiso_para_acabar to set
     */
    public void setDa_permiso_para_acabar(boolean da_permiso_para_acabar) {
        this.da_permiso_para_acabar = da_permiso_para_acabar;
    }

    /**
     * @return the matriz_parafinal
     */
    public float[] getMatriz_parafinal() {
        return matriz_parafinal;
    }

    /**
     * @param matriz_parafinal the matriz_parafinal to set
     */
    public void setMatriz_parafinal(float[] matriz_parafinal) {
        this.matriz_parafinal = matriz_parafinal;
    }
}
